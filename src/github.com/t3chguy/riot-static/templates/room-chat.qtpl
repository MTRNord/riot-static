{% import "time" %}
{% import "github.com/matrix-org/gomatrix" %}
{% import "github.com/t3chguy/riot-static/mxclient" %}
{% import "github.com/t3chguy/riot-static/sanitizer" %}



{% func printTimestamp(unixTime int) %}
    {%s time.Unix(0, int64(unixTime)*int64(time.Millisecond)).Format("2 Jan 2006 15:04:05") %}
{% endfunc %}



{% code
    type MemberEventContent struct {
        Membership  string
        AvatarURL   mxclient.MXCURL
        DisplayName string
    }

    func convertContentToMEC(content map[string]interface{}, homeserverBaseUrl string) (mec MemberEventContent) {
        if membership, ok := content["membership"].(string); ok {
            mec.Membership = membership
        }
        if avatarUrl, ok := content["avatar_url"].(string); ok {
            mec.AvatarURL = *mxclient.NewMXCURL(avatarUrl, homeserverBaseUrl)
        }
        if displayName, ok := content["displayname"].(string); ok {
            mec.DisplayName = displayName
        }

        return
    }

    func getMemberEventContent(ev gomatrix.Event, homeserverBaseUrl string) MemberEventContent {
        return convertContentToMEC(ev.Content, homeserverBaseUrl)
    }

    func getMemberEventPrevContent(ev gomatrix.Event, homeserverBaseUrl string) MemberEventContent {
        return convertContentToMEC(ev.PrevContent, homeserverBaseUrl)
    }

    type RoomChatPage struct {
        RoomInfo            mxclient.RoomInfo
        MemberMap           map[string]mxclient.MemberInfo
        Events              []gomatrix.Event
        PageSize            int
        ReachedRoomCreate   bool
        CurrentOffset       int
        Anchor              string

        Sanitizer *sanitizer.Sanitizer
        HomeserverBaseURL string
    }
%}



{% func (p *RoomChatPage) textForMRoomMemberEvent(ev gomatrix.Event) %}
    {% code
        content := getMemberEventContent(ev, p.HomeserverBaseURL)
        prevContent := getMemberEventPrevContent(ev, p.HomeserverBaseURL)

        sender := ev.Sender
        target := *ev.StateKey
        senderPretty := p.MemberMap[sender].GetName()
        targetPretty := p.MemberMap[target].GetName()
    %}

    {% switch content.Membership %}
        {% case "invite" %}
            {%s senderPretty %} invited {%s targetPretty %}.
        {% case "ban" %}
            {% code
                var reasonString string
                if reason, ok := ev.Content["reason"].(string); ok {
                    reasonString = " (" + reason + ")"
                }
            %}
            {%s senderPretty %} banned {%s targetPretty %}{%s reasonString %}.
        {% case "join" %}
            {% if ev.PrevContent != nil && prevContent.Membership == "join" %}
                {% if prevContent.DisplayName == "" && content.DisplayName != "" %}
                    {%s senderPretty %} set their display name to {%s content.DisplayName %}.
                {% elseif prevContent.DisplayName != "" && content.DisplayName == "" %}
                    {%s senderPretty %} removed their display name {%s prevContent.DisplayName %}.
                {% elseif prevContent.DisplayName != content.DisplayName %}
                    {%s senderPretty %} changed their display name from {%s prevContent.DisplayName %} to {%s content.DisplayName %}.
                {% elseif !prevContent.AvatarURL.IsValid() && content.AvatarURL.IsValid() %}
                    {%s senderPretty %} set a profile picture.
                {% elseif prevContent.AvatarURL.IsValid() && !content.AvatarURL.IsValid() %}
                    {%s senderPretty %} removed their profile picture.
                {% elseif prevContent.AvatarURL != content.AvatarURL %}
                    {%s senderPretty %} changed their profile picture.
                {% endif %}
            {% else %}
                {%s targetPretty %} joined the room.
            {% endif %}
        {% case "leave" %}
            {% if sender == target %}
                {% if prevContent.Membership == "invite" %}
                    {%s targetPretty %} rejected invite.
                {% else %}
                    {%s targetPretty %} left the room.
                {% endif %}
            {% elseif prevContent.Membership == "ban" %}
                {%s senderPretty %} unbanned {%s targetPretty %}.
            {% elseif prevContent.Membership == "leave" %}
                {%s senderPretty %} kicked {%s targetPretty %}.
            {% elseif prevContent.Membership == "invite" %}
                {%s senderPretty %} withdrew {%s targetPretty %}'s invite.
            {% else %}
                {%s targetPretty %} left the room.
            {% endif %}
    {% endswitch %}
{% endfunc %}

{% func (p *RoomChatPage) textForMRoomMessageEvent(ev gomatrix.Event) %}
    {% switch ev.Content["msgtype"] %}
        {% case "m.image" %}
            {% code
                url := ev.Content["url"].(string)

                if thumbUrl, ok := ev.Content["thumbnail_url"].(string); ok {
                    url = thumbUrl
                }

                mxc := mxclient.NewMXCURL(url, p.HomeserverBaseURL)
            %}
            <a href="{%s mxc.ToURL() %}" rel="noopener">
                <img src="{%s mxc.ToThumbURL(360, 360, "scale") %}" />
                <br>
                <sup>{%s Str(ev.Content["body"]) %}</sup>
            </a>
        {% case "m.file" %}
            {% code mxc := mxclient.NewMXCURL(Str(ev.Content["url"]), p.HomeserverBaseURL) %}
            <a href="{%s mxc.ToURL() %}" rel="noopener">
                {% if ev.Content["thumbnail_url"] != "" %}
                    <img src="{%s mxc.ToThumbURL(360, 360, "scale") %}" />
                    <br>
                {% endif %}
                <sup>{%s Str(ev.Content["body"]) %}</sup>
            </a>
            m.file
        {% case "m.location" %}
            m.location Event
        {% case "m.video" %}
            m.video Event
        {% case "m.audio" %}
            m.audio Event
        {% default %} {% comment %}handler for "m.notice", "m.emote", "m.text"{% endcomment %}
            {% code
                var formattedOk bool
                var sanitizedFormattedBody, body string

                if ev.Content["format"] == "org.matrix.custom.html" {
                    if formattedBodyStr, ok := ev.Content["formatted_body"].(string); ok {
                        sanitizedFormattedBody, formattedOk = p.Sanitizer.Sanitize(formattedBodyStr)
                    }
                }
                if !formattedOk {
                    if bodyStr, ok := ev.Content["body"].(string); ok {
                        body = bodyStr
                    }
                }
            %}

            {% if formattedOk %}
                {%s= sanitizedFormattedBody %}
            {% elseif body != "" %}
                {%s body %}
            {% else %}
                <span class="redacted">Redacted or Malformed Event</span>
            {% endif %}
    {% endswitch %}
{% endfunc %}

{% stripspace %}
{% func (p *RoomChatPage) printEvent(ev gomatrix.Event) %}
    {% code
        memberInfo := p.MemberMap[ev.Sender]
    %}

    <tr itemscope itemprop="hasPart" itemtype="http://schema.org/Message">
        {%= p.printPermalinkColumn(ev) %}
        {% switch ev.Type %}
            {% case "m.room.message" %}
                <td nowrap>
                    <a href="./room/{%s p.RoomInfo.RoomID %}/members/{%s ev.Sender %}" itemscope itemprop="sender" itemtype="http://schema.org/Person">

                        {% if memberInfo.AvatarURL.IsValid() %}
                            <img class="avatar userAvatar" src="{%s memberInfo.AvatarURL.ToThumbURL(48, 48, "crop") %}" />
                        {% else %}
                            <img class="avatar userAvatar" src="./img/logo_missing.png" />
                        {% endif %}

                        {% if ev.Content["msgtype"] == "m.emote" %}*{% space %}{% endif %}

                        {%s memberInfo.GetName() %}
                        <meta itemprop="name" content="{%s memberInfo.GetName() %}" />
                    </a>
                </td>
                <td  itemprop="text">{%= p.textForMRoomMessageEvent(ev) %}</td>
            {% case "m.room.member" %}
                <td></td>
                <td>{%= p.textForMRoomMemberEvent(ev) %}</td>
            {% case "m.room.topic" %}
                <td></td>
                <td>
                    {%s ev.Sender %}{% space %}
                    {% code
                        prevTopic := Str(ev.PrevContent["topic"])
                        curTopic := Str(ev.Content["topic"])
                    %}
                    {% if curTopic != "" && prevTopic == "" %}
                        set the topic to "{%s curTopic %}".
                    {% elseif curTopic == "" && prevTopic != "" %}
                        removed the topic "{%s prevTopic %}".
                    {% else %}
                        changed the topic to "{%s curTopic %}" from "{%s prevTopic %}".
                    {% endif %}
                </td>
            {% default %}
                <td>{%s ev.Type %}</td>
                <td>Default Event Renderer.</td>
        {% endswitch %}
    </tr>
{% endfunc %}

{% func (p *RoomChatPage) printPermalinkColumn(ev gomatrix.Event) %}
    <td class="timestamp" nowrap>
        <meta itemprop="dateSent" content="{%= printTimestamp(ev.Timestamp) %}" />
        <a href="https://matrix.to/#/{%s p.RoomInfo.RoomID %}/{%s ev.ID %}">{%= printTimestamp(ev.Timestamp) %}</a>
    </td>
{% endfunc %}



{% func (p *RoomChatPage) Title() %}
    Public Room Timeline - {%s p.RoomInfo.Name %} - Riot Static
{% endfunc %}

{% func (p *RoomChatPage) Head() %}
    {% if !p.ReachedRoomCreate %}
        <link rel="next" href="?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset + p.PageSize %}">
    {% endif %}
    {% if len(p.Events) > 0 %}
        <link rel="prev" href="?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset - len(p.Events) %}">
    {% endif %}
{% endfunc %}

{% func (p *RoomChatPage) Header() %}
    {%= PrintRoomHeader(p.RoomInfo) %}
{% endfunc %}

{% func (p *RoomChatPage) Body() %}
    <div class="paginate">
        {% if p.ReachedRoomCreate %}
            <h4>You have reached the beginning of time (for this room).</h4>
        {% else %}
            <a href="./room/{%s p.RoomInfo.RoomID %}/?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset + p.PageSize %}">
                <h4>Load older messages</h4>
            </a>
        {% endif %}
    </div>
    <hr>

    {% if len(p.Events) > 0 %}
        <table id="timeline">
            <thead>
                <tr>
                    <th>Timestamp</th>
                    <th>&nbsp;</th>
                    <th>Message</th>
                </tr>
            </thead>
            <tbody itemprop="mainEntity" itemscope itemtype="http://schema.org/Conversation">
                {% for _, event := range p.Events %}
                    {%= p.printEvent(event) %}
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <h3>No Events</h3>
    {% endif %}

    <hr>
    <div class="paginate">
        <a href="./room/{%s p.RoomInfo.RoomID %}/?anchor={%s p.Anchor %}&offset={%d p.CurrentOffset - len(p.Events) %}">
            <h4>Show newer messages</h4>
        </a>
    </div>
    <hr>

    <a href="./">Back to Room List</a>
{% endfunc %}
{% endstripspace %}